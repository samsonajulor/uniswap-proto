/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISwapper,
  ISwapperInterface,
} from "../../../contracts/interfaces/ISwapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_USDCTokAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_ETHTokAmount",
        type: "uint256",
      },
    ],
    name: "AddLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getETHTokReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "_ETHTok",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUSDCTokReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "_USDCTok",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_USDCTokAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_ETHTokAmount",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ETHTokAmount",
        type: "uint256",
      },
    ],
    name: "swapETHTokForUSDCTok",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_USDCTokAmount",
        type: "uint256",
      },
    ],
    name: "swapUSDCTokForETHTok",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISwapper__factory {
  static readonly abi = _abi;
  static createInterface(): ISwapperInterface {
    return new Interface(_abi) as ISwapperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ISwapper {
    return new Contract(address, _abi, runner) as unknown as ISwapper;
  }
}
