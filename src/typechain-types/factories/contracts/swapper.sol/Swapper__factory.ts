/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Swapper,
  SwapperInterface,
} from "../../../contracts/swapper.sol/Swapper";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_USDCTokAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_ETHTokAmount",
        type: "uint256",
      },
    ],
    name: "AddLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ETHTok",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDCTok",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approveETHTok",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approveUSDCTok",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getETHTokReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "_ETHTok",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUSDCTokReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "_USDCTok",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "liquidityProviders",
    outputs: [
      {
        internalType: "uint256",
        name: "USDCTokReserve",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ETHTokReserve",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_USDCTokAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_ETHTokAmount",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50730925866e1e5b629416e8199003458de8697e43ae6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073fec0603cd79f64c12e97580aaa7c1bd76649fa34600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d90806100c96000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063cb1652de11610066578063cb1652de1461010e578063d0266e631461012a578063dbd9426714610146578063e11db58014610177578063ec2fbe051461019357610093565b80635a4bfb88146100985780635c866d53146100b65780635f243b06146100d45780639d7de6b3146100f2575b600080fd5b6100a06101b1565b6040516100ad9190610986565b60405180910390f35b6100be610254565b6040516100cb91906109e2565b60405180910390f35b6100dc610278565b6040516100e99190610986565b60405180910390f35b61010c60048036038101906101079190610a2e565b61031a565b005b61012860048036038101906101239190610a2e565b6105e3565b005b610144600480360381019061013f9190610a6e565b6107dd565b005b610160600480360381019061015b9190610ac7565b61087f565b60405161016e929190610af4565b60405180910390f35b610191600480360381019061018c9190610a6e565b6108a3565b005b61019b610947565b6040516101a891906109e2565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161020e91906109e2565b602060405180830381865afa15801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610b32565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102d491906109e2565b602060405180830381865afa1580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103159190610b32565b905090565b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154101580156103ae575080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410155b6103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e490610bbc565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461043f9190610c0b565b9250508190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546104989190610c0b565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016104fa929190610c3f565b6020604051808303816000875af1158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190610ca0565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161059b929190610c3f565b6020604051808303816000875af11580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190610ca0565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161064093929190610ccd565b6020604051808303816000875af115801561065f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106839190610ca0565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016106e393929190610ccd565b6020604051808303816000875af1158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610ca0565b5081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546107799190610d04565b9250508190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546107d29190610d04565b925050819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330836040518363ffffffff1660e01b8152600401610838929190610c3f565b6020604051808303816000875af1158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190610ca0565b5050565b60026020528060005260406000206000915090508060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330836040518363ffffffff1660e01b8152600401610900929190610c3f565b6020604051808303816000875af115801561091f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109439190610ca0565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b6109808161096d565b82525050565b600060208201905061099b6000830184610977565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109cc826109a1565b9050919050565b6109dc816109c1565b82525050565b60006020820190506109f760008301846109d3565b92915050565b600080fd5b610a0b8161096d565b8114610a1657600080fd5b50565b600081359050610a2881610a02565b92915050565b60008060408385031215610a4557610a446109fd565b5b6000610a5385828601610a19565b9250506020610a6485828601610a19565b9150509250929050565b600060208284031215610a8457610a836109fd565b5b6000610a9284828501610a19565b91505092915050565b610aa4816109c1565b8114610aaf57600080fd5b50565b600081359050610ac181610a9b565b92915050565b600060208284031215610add57610adc6109fd565b5b6000610aeb84828501610ab2565b91505092915050565b6000604082019050610b096000830185610977565b610b166020830184610977565b9392505050565b600081519050610b2c81610a02565b92915050565b600060208284031215610b4857610b476109fd565b5b6000610b5684828501610b1d565b91505092915050565b600082825260208201905092915050565b7f496e73756666696369656e74206c697175696469747900000000000000000000600082015250565b6000610ba6601683610b5f565b9150610bb182610b70565b602082019050919050565b60006020820190508181036000830152610bd581610b99565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c168261096d565b9150610c218361096d565b925082821015610c3457610c33610bdc565b5b828203905092915050565b6000604082019050610c5460008301856109d3565b610c616020830184610977565b9392505050565b60008115159050919050565b610c7d81610c68565b8114610c8857600080fd5b50565b600081519050610c9a81610c74565b92915050565b600060208284031215610cb657610cb56109fd565b5b6000610cc484828501610c8b565b91505092915050565b6000606082019050610ce260008301866109d3565b610cef60208301856109d3565b610cfc6040830184610977565b949350505050565b6000610d0f8261096d565b9150610d1a8361096d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4f57610d4e610bdc565b5b82820190509291505056fea2646970667358221220bae1d10866f426cea2ae440665210a01489a5b92b35bf3f5d9bc1b9527242e2c64736f6c634300080d0033";

type SwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swapper__factory extends ContractFactory {
  constructor(...args: SwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Swapper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Swapper__factory {
    return super.connect(runner) as Swapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapperInterface {
    return new Interface(_abi) as SwapperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Swapper {
    return new Contract(address, _abi, runner) as unknown as Swapper;
  }
}
