/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Swapper,
  SwapperInterface,
} from "../../../contracts/swapper.sol/Swapper";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ETHTok",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDCTok",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_USDCTokAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_ETHTokAmount",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getETHTokReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUSDCTokReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "liquidityProviders",
    outputs: [
      {
        internalType: "uint256",
        name: "USDCTokReserve",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ETHTokReserve",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_USDCTokAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_ETHTokAmount",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ETHTokAmount",
        type: "uint256",
      },
    ],
    name: "swapETHTokForUSDCTok",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_USDCTokAmount",
        type: "uint256",
      },
    ],
    name: "swapUSDCTokForETHTok",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b507357df052b630dd1a713c91cb87fae9fc03aa3182a6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507318abf89d5932b62ee68101d9f689c4200fa55096600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506112df806100c96000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639d7de6b3116100665780639d7de6b31461010e578063d4eb15ff1461012a578063dbd9426714610146578063e0d2883214610177578063ec2fbe051461019357610093565b80635a4bfb88146100985780635c866d53146100b65780635f243b06146100d45780639cd441da146100f2575b600080fd5b6100a06101b1565b6040516100ad9190610e14565b60405180910390f35b6100be610254565b6040516100cb9190610e70565b60405180910390f35b6100dc610278565b6040516100e99190610e14565b60405180910390f35b61010c60048036038101906101079190610ebc565b61031a565b005b61012860048036038101906101239190610ebc565b6104ec565b005b610144600480360381019061013f9190610efc565b610791565b005b610160600480360381019061015b9190610f55565b610aa1565b60405161016e929190610f82565b60405180910390f35b610191600480360381019061018c9190610efc565b610ac5565b005b61019b610dd5565b6040516101a89190610e70565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161020e9190610e70565b602060405180830381865afa15801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610fc0565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102d49190610e70565b602060405180830381865afa1580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103159190610fc0565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930846040518363ffffffff1660e01b8152600401610375929190610fed565b600060405180830381600087803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610404929190610fed565b600060405180830381600087803b15801561041e57600080fd5b505af1158015610432573d6000803e3d6000fd5b5050505081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546104889190611045565b9250508190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546104e19190611045565b925050819055505050565b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015410158015610580575080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410155b6105bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b6906110f8565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546106119190611118565b9250508190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461066a9190611118565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016106cc929190610fed565b600060405180830381600087803b1580156106e657600080fd5b505af11580156106fa573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161075b929190610fed565b600060405180830381600087803b15801561077557600080fd5b505af1158015610789573d6000803e3d6000fd5b505050505050565b600081116107d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cb90611198565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108309190610e70565b602060405180830381865afa15801561084d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108719190610fc0565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108d09190610e70565b602060405180830381865afa1580156108ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109119190610fc0565b90506000821180156109235750600081115b610962576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610959906110f8565b60405180910390fd5b600081848461097191906111b8565b61097b9190611241565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016109dc93929190611272565b600060405180830381600087803b1580156109f657600080fd5b505af1158015610a0a573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610a69929190610fed565b600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b5050505050505050565b60026020528060005260406000206000915090508060000154908060010154905082565b60008111610b08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aff90611198565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b649190610e70565b602060405180830381865afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190610fc0565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c049190610e70565b602060405180830381865afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190610fc0565b9050600082118015610c575750600081115b610c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8d906110f8565b60405180910390fd5b6000828483610ca591906111b8565b610caf9190611241565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610d0e93929190611272565b600060405180830381600087803b158015610d2857600080fd5b505af1158015610d3c573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d9d929190610fed565b600060405180830381600087803b158015610db757600080fd5b505af1158015610dcb573d6000803e3d6000fd5b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b610e0e81610dfb565b82525050565b6000602082019050610e296000830184610e05565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e5a82610e2f565b9050919050565b610e6a81610e4f565b82525050565b6000602082019050610e856000830184610e61565b92915050565b600080fd5b610e9981610dfb565b8114610ea457600080fd5b50565b600081359050610eb681610e90565b92915050565b60008060408385031215610ed357610ed2610e8b565b5b6000610ee185828601610ea7565b9250506020610ef285828601610ea7565b9150509250929050565b600060208284031215610f1257610f11610e8b565b5b6000610f2084828501610ea7565b91505092915050565b610f3281610e4f565b8114610f3d57600080fd5b50565b600081359050610f4f81610f29565b92915050565b600060208284031215610f6b57610f6a610e8b565b5b6000610f7984828501610f40565b91505092915050565b6000604082019050610f976000830185610e05565b610fa46020830184610e05565b9392505050565b600081519050610fba81610e90565b92915050565b600060208284031215610fd657610fd5610e8b565b5b6000610fe484828501610fab565b91505092915050565b60006040820190506110026000830185610e61565b61100f6020830184610e05565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061105082610dfb565b915061105b83610dfb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110905761108f611016565b5b828201905092915050565b600082825260208201905092915050565b7f496e73756666696369656e74206c697175696469747900000000000000000000600082015250565b60006110e260168361109b565b91506110ed826110ac565b602082019050919050565b60006020820190508181036000830152611111816110d5565b9050919050565b600061112382610dfb565b915061112e83610dfb565b92508282101561114157611140611016565b5b828203905092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b600061118260208361109b565b915061118d8261114c565b602082019050919050565b600060208201905081810360008301526111b181611175565b9050919050565b60006111c382610dfb565b91506111ce83610dfb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561120757611206611016565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061124c82610dfb565b915061125783610dfb565b92508261126757611266611212565b5b828204905092915050565b60006060820190506112876000830186610e61565b6112946020830185610e61565b6112a16040830184610e05565b94935050505056fea2646970667358221220d2c56430dc0770ed316020259baeaec297f5120f220e71214d3a068257ffb43f64736f6c634300080d0033";

type SwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swapper__factory extends ContractFactory {
  constructor(...args: SwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Swapper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Swapper__factory {
    return super.connect(runner) as Swapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapperInterface {
    return new Interface(_abi) as SwapperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Swapper {
    return new Contract(address, _abi, runner) as unknown as Swapper;
  }
}
