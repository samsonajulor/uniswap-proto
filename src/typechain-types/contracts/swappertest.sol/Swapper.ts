/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SwapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ETHTok"
      | "USDCTok"
      | "addLiquidity"
      | "getReserves"
      | "liquidityProviders"
      | "removeLiquidity"
      | "swapETHTokForUSDCTok"
      | "swapUSDCTokForETHTok"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ETHTok", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDCTok", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityProviders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHTokForUSDCTok",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapUSDCTokForETHTok",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ETHTok", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDCTok", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHTokForUSDCTok",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapUSDCTokForETHTok",
    data: BytesLike
  ): Result;
}

export interface Swapper extends BaseContract {
  connect(runner?: ContractRunner | null): Swapper;
  waitForDeployment(): Promise<this>;

  interface: SwapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ETHTok: TypedContractMethod<[], [string], "view">;

  USDCTok: TypedContractMethod<[], [string], "view">;

  addLiquidity: TypedContractMethod<
    [_USDCTokAmount: BigNumberish, _ETHTokAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getReserves: TypedContractMethod<[], [[bigint, bigint]], "view">;

  liquidityProviders: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { USDCTokReserve: bigint; ETHTokReserve: bigint }],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [_USDCTokAmount: BigNumberish, _ETHTokAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapETHTokForUSDCTok: TypedContractMethod<
    [_ETHTokAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapUSDCTokForETHTok: TypedContractMethod<
    [_USDCTokAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ETHTok"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "USDCTok"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [_USDCTokAmount: BigNumberish, _ETHTokAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReserves"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "liquidityProviders"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { USDCTokReserve: bigint; ETHTokReserve: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [_USDCTokAmount: BigNumberish, _ETHTokAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapETHTokForUSDCTok"
  ): TypedContractMethod<[_ETHTokAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapUSDCTokForETHTok"
  ): TypedContractMethod<[_USDCTokAmount: BigNumberish], [void], "nonpayable">;

  filters: {};
}
